import os
import pandas as pd
import requests
import time

CSV_FILE = 'sdss_data.csv'
OUTPUT_DIR = 'sdss_images'
IMAGE_SIZE = 128
SCALE = 0.396 # SDSS Default Arcsec/pixel

def query_sdss_sql_server():
    """
    Query SDSS Data Release 18's SQL Server
    """
    sdss_url = 'https://skyserver.sdss.org/dr18/SkyServerWS/SearchTools/SqlSearch'
    sql_query = \
    """
    SELECT TOP 1000 p.ra, p.dec, s.z
    FROM PhotoObj p
    JOIN SpecObj s ON p.objID = s.bestObjID
    WHERE p.type = 3 AND p.clean = 1 AND s.z IS NOT NULL
    """
    params = \
    {
        'cmd': sql_query,
        'format': 'csv'
    }

    print('Querying galaxy coordinates into csv file...')

    try:
        response = requests.get(sdss_url, params = params)
        response.raise_for_status()
        
        with open(CSV_FILE, 'w', encoding = 'utf-8') as f:
            f.write(response.text)
        
    except requests.exceptions.RequestException as e:
        print(f'Failed to load coordinates to csv: {str(e)}')

def download_sdss_images():
    """
    Build the image directory and query the respective images based on the dataframe generated by the csv.
    """

    print(f'Attempting download of {len(df)} galaxy cutout images...')

    os.makedirs(OUTPUT_DIR, exist_ok = True)

    sdss_url = 'https://skyserver.sdss.org/dr18/SkyServerWS/ImgCutout/getjpeg'

    for index, row in df.iterrows():
        ra = row['ra']
        dec = row['dec']
        img_file_name = os.path.join(OUTPUT_DIR, f'image_{index:04d}.jpg')

        params = \
        {
            'ra': ra,
            'dec': dec,
            'scale': SCALE,
            'width': IMAGE_SIZE,
            'height': IMAGE_SIZE,
        }

        try:
            response = requests.get(sdss_url, params = params, timeout = 30)
            response.raise_for_status()

            with open(img_file_name, 'wb') as f:
                f.write(response.content)
            
            print(f'Saved {img_file_name}')
            time.sleep(1)

        except requests.exceptions.RequestException as e:
            print(f'Failed to download image {index}: {str(e)}')


if __name__ == '__main__':
    if not os.path.exists(CSV_FILE) or os.stat(CSV_FILE).st_size == 0:
        query_sdss_sql_server()

    # Load the csv, which should by now be populated with the right ascension and declination values
    df = pd.read_csv(CSV_FILE, comment = '#')
    # print(df.columns.tolist())
    print(f'Successfully loaded {len(df)} galaxy coordinates.')

    download_sdss_images()
